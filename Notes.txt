To yank all from Vim:
	%y+

To yank certain lines from Vim:
	Go into Visual Line by Shift+V
	Highlight the lines
	Type "*y



Common routines

Insert to beginning of vector
	myVector.insert(myVector.begin(), valueTobeEntered)

Insert element at an index of vector
	myVector.insert(myVector.begin() + index, valueToBeEntered);

Erase element at an index of vector
	myVector.erase(myVector.begin() + index);

Remove last element in vector
	myVector.pop_back();

Populate a vector from n to m
	Create vector with initialize size
		vector<type> myVector(n);
	Populate up to m
		std::iota (myVector.begin(), myVector.end(), m);

Update each value in vector
	for (double &d : myVector) {
		d += 1.0;
	}

Check if a string s1 is a substring of string s2

	if (s2.find(s1) != npos) {
	}




https://codeforces.com/blog/entry/21344
Common time complexities

Let n be the main variable in the problem.

    If n ≤ 12, the time complexity can be O(n!).
    If n ≤ 25, the time complexity can be O(2n).
    If n ≤ 100, the time complexity can be O(n4).
    If n ≤ 500, the time complexity can be O(n3).
    If n ≤ 104, the time complexity can be O(n2).
    If n ≤ 106, the time complexity can be O(n log n).
    If n ≤ 108, the time complexity can be O(n).
    If n > 108, the time complexity can be O(log n) or O(1).

Examples of each common time complexity

    O(n!) [Factorial time]: Permutations of 1 ... n
    O(2n) [Exponential time]: Exhaust all subsets of an array of size n
    O(n3) [Cubic time]: Exhaust all triangles with side length less than n
    O(n2) [Quadratic time]: Slow comparison-based sorting (eg. Bubble Sort, Insertion Sort, Selection Sort)
    O(n log n) [Linearithmic time]: Fast comparison-based sorting (eg. Merge Sort)
    O(n) [Linear time]: Linear Search (Finding maximum/minimum element in a 1D array), Counting Sort
    O(log n) [Logarithmic time]: Binary Search, finding GCD (Greatest Common Divisor) using Euclidean Algorithm
    O(1) [Constant time]: Calculation (eg. Solving linear equations in one unknown)
